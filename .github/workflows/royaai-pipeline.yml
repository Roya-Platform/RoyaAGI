name: RoyaAi CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  DOTNET_VERSION: '7.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/royaai-presentation
  HELM_CHART_PATH: ./deployment/royaai
  HELM_CHART_VERSION: 0.1.0

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build
        run: dotnet build --no-restore
        
      - name: Test
        run: dotnet test --no-build --verbosity normal
        
      - name: Run Agent Protocol Compliance Tests
        run: |
          # Install necessary tools for Agent Protocol testing
          npm install -g @agent-protocol/cli
          
          # Build and start the application in background
          dotnet build -c Release ./layers/Presentation/RoyaAi.Layers.Presentation.csproj
          dotnet ./layers/Presentation/bin/Release/net7.0/RoyaAi.Layers.Presentation.dll &
          PID=$!
          
          # Wait for the application to start
          sleep 10
          
          # Run Agent Protocol compliance tests
          agent-protocol test http://localhost:5000/v1
          
          # Stop the application
          kill $PID
  
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Update Helm chart values with new image
        run: |
          # Update the image tag in values.yaml
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1 | cut -d ":" -f 2)
          sed -i "s/tag: \"latest\"/tag: \"$IMAGE_TAG\"/g" ${{ env.HELM_CHART_PATH }}/values.yaml
          sed -i "s/repository: royaai\/presentation/repository: ${{ env.REGISTRY }}\/${{ env.IMAGE_NAME }}/g" ${{ env.HELM_CHART_PATH }}/values.yaml
          
      - name: Package Helm chart
        run: |
          helm package ${{ env.HELM_CHART_PATH }} --version ${{ env.HELM_CHART_VERSION }} --app-version $IMAGE_TAG
          
      - name: Save Helm chart as artifact
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: royaai-${{ env.HELM_CHART_VERSION }}.tgz
          retention-days: 7

  deploy-dev:
    name: Deploy to Development
    if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')) }}
    runs-on: ubuntu-latest
    needs: build
    environment: development
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Helm chart
        uses: actions/download-artifact@v3
        with:
          name: helm-chart
          
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}
          
      - name: Deploy to development
        run: |
          helm upgrade --install royaai-dev royaai-${{ env.HELM_CHART_VERSION }}.tgz \
            --namespace royaai-dev --create-namespace \
            --set env.ASPNETCORE_ENVIRONMENT=Development \
            --wait --timeout 5m
            
      - name: Verify deployment
        run: |
          # Wait for the deployment to be ready
          kubectl rollout status deployment/royaai-dev -n royaai-dev
          
          # Test the API endpoint
          kubectl run curl --image=curlimages/curl -n royaai-dev --rm -i --restart=Never -- \
            curl -s http://royaai-dev/v1 | grep "agent_protocol"

  deploy-staging:
    name: Deploy to Staging
    if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')) }}
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Helm chart
        uses: actions/download-artifact@v3
        with:
          name: helm-chart
          
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
          
      - name: Deploy to staging
        run: |
          helm upgrade --install royaai-staging royaai-${{ env.HELM_CHART_VERSION }}.tgz \
            --namespace royaai-staging --create-namespace \
            --set env.ASPNETCORE_ENVIRONMENT=Staging \
            --wait --timeout 5m
            
      - name: Run Agent Protocol Compliance Tests
        run: |
          # Install necessary tools for Agent Protocol testing
          npm install -g @agent-protocol/cli
          
          # Run compliance tests against the deployed service
          STAGING_IP=$(kubectl get svc royaai-staging -n royaai-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          agent-protocol test http://$STAGING_IP/v1

  deploy-production:
    name: Deploy to Production
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod' }}
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Helm chart
        uses: actions/download-artifact@v3
        with:
          name: helm-chart
          
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
          
      - name: Deploy to production
        run: |
          helm upgrade --install royaai-prod royaai-${{ env.HELM_CHART_VERSION }}.tgz \
            --namespace royaai-prod --create-namespace \
            --set env.ASPNETCORE_ENVIRONMENT=Production \
            --set replicaCount=3 \
            --set autoscaling.enabled=true \
            --wait --timeout 5m 